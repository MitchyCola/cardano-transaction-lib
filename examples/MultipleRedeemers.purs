module Examples.MultipleRedeemers (threeRedeemerContract, main) where

import Contract.Prelude

import Cardano.Types.Value
  ( CurrencySymbol
  , NonAdaAsset(NonAdaAsset)
  , Value(Value)
  , mkCurrencySymbol
  )
import Contract.Aeson (decodeAeson, fromString)
import Contract.Address (NetworkId(TestnetId))
import Contract.Monad
  ( ContractConfig(ContractConfig)
  , Contract
  , ConfigParams(ConfigParams)
  , LogLevel(Trace)
  , liftContractM
  , liftedE
  , liftedM
  , logInfo'
  , runContract
  , runContract_
  , launchAff_
  , defaultDatumCacheWsConfig
  , defaultOgmiosWsConfig
  , defaultServerConfig
  , mkContractConfig
  )
import Contract.PlutusData
  ( PlutusData(..)
  , toData
  , unitDatum
  )
import Contract.Prim.ByteArray (byteArrayFromAscii)
import Contract.ScriptLookups as Lookups
import Contract.Scripts
  ( Validator
  , validatorHash
  , MintingPolicy
  , ValidatorHash
  , scriptHashAddress
  )
import Contract.Transaction
  ( BalancedSignedTransaction(BalancedSignedTransaction)
  , balanceAndSignTx
  , submit
  , TransactionHash
  , TransactionInput
  )
import Contract.TxConstraints as Constraints
import Contract.Utxos (utxosAt, UtxoM(UtxoM))
import Contract.Value
  ( mkTokenName
  , scriptCurrencySymbol
  , TokenName
  , getCurrencySymbol
  )
import Contract.Value as Value
import Control.Monad.Reader.Trans (ask)
import Contract.Wallet (mkNamiWalletAff)
import Data.Array (replicate)
import Data.BigInt (fromInt)
import Data.Bitraversable (bitraverse)
import Data.Foldable (length, sum)
import Data.Int (toNumber)
import Data.Map as Map
import Data.Set as Set
import Effect.Aff (Aff, delay, Milliseconds(Milliseconds), error)
import Plutus.ToPlutusType (toPlutusType)
import Plutus.Types.Transaction (Utxo)
import Safe.Coerce (coerce)
import Types.Redeemer (Redeemer(Redeemer))

-- | to run this, edit `ps-entrypoint` in the MakeFile
main :: Effect Unit
main = launchAff_ threeRedeemerContract

type Configuration =
  ( -- | the scripts we're going to lock the utxos at 
    validators :: Array (Validator /\ Redeemer)
  -- | the Tokennames and the amounts we're going to luck
  , tokens :: Array (String /\ Int)
  -- | the CurrencySymbols wee're gonig to look the tokens at 
  , policies :: Array MintingPolicy
  )

-- FIXME: this doesn't work without a browser
threeRedeemerContract :: Aff Unit
threeRedeemerContract = do
  log "ThreeRedeemerContract"

  wallet <- mkNamiWalletAff
  mps <- liftM (error "Could not obtain MintingPolicies") $ sequence
    [ mp1, mp2, mp3 ]
  (red1 /\ red2 /\ red3) <- do
    r1 <- liftM (error "Could not obtain Validator for 1") isRedeemedBy1Script
    r2 <- liftM (error "Could not obtain Validator for 2") isRedeemedBy2Script
    r3 <- liftM (error "Could not obtain Validator for 3") isRedeemedBy3Script
    pure $ r1 /\ r2 /\ r3

  let
    configuration :: Record Configuration
    configuration =
      { validators:
          [ red1 /\ Redeemer (toData $ Integer $ fromInt 1)
          , red2 /\ Redeemer (toData $ Integer $ fromInt 2)
          , red3 /\ Redeemer (toData $ Integer $ fromInt 3)
          ]
      , tokens:
          [ Tuple "pleasedontspent" 3
          ]
      , policies: mps
      }

  cfg :: ContractConfig Configuration <- mkContractConfig $ ConfigParams $
    { wallet: pure wallet
    , datumCacheConfig: defaultDatumCacheWsConfig
    , ogmiosConfig: defaultOgmiosWsConfig
    , ctlServerConfig: defaultServerConfig
    , networkId: TestnetId
    , logLevel: Trace
    , extraConfig: configuration
    }

  hash <- runContract cfg createTokens

  log ("Created utxos with transactionhash " <> show hash)
  log "Going on with spending scriptoutputs from previous transaction"

  runContract_ cfg $ spendTokens hash

-- | At each script we lock n of each tokens, contained in single utxos 
-- | For each of the CurrencySymbols we mint a value with a correspnding redeemer
createTokens
  :: Contract Configuration TransactionHash
createTokens = do
  ContractConfig
    { tokens
    , policies
    , validators
    } <- ask

  css :: Array CurrencySymbol <- liftContractM "Could not get CurrencySymbols" $
    for policies mkCurSym
  toks :: Array (Tuple TokenName Int) <- for tokens $
    bitraverse
      ( liftContractM "could not make tokennames with amounts" <<<
          (mkTokenName <=< byteArrayFromAscii)
      )
      pure

  logInfo' $ "Trying to create " <> show toks

  let
    toCsValue :: Array (Tuple TokenName Int) -> CurrencySymbol -> Value.Value
    toCsValue t cs =
      unwrap <<< toPlutusType <<< Value mempty <<< NonAdaAsset
        <<< Map.singleton cs
        $ Map.fromFoldable
        $ map fromInt
        <$> t

    tokenCount :: Int
    tokenCount = sum $ snd <$> tokens

    values :: Array Value.Value
    values = toCsValue toks <$> css

  vhashes :: Array ValidatorHash <- traverse
    (liftContractM "could not hash validator" <<< validatorHash <<< fst)
    validators

  let
    lookups :: Lookups.ScriptLookups PlutusData
    lookups = mconcat
      [ mconcat $ Lookups.validator <<< fst <$> validators
      , mconcat $ Lookups.mintingPolicy <$> policies
      ]

    constraints :: Constraints.TxConstraints Unit Unit
    constraints = mconcat
      [ mconcat $ do
          Tuple _ red <- validators
          val <- values
          pure $ Constraints.mustMintValueWithRedeemer red val
      -- create all the tokens in one utxo each
      , mconcat $ do
          vhash <- vhashes
          cs <- css
          tok <- toks
          replicate tokenCount
            $ Constraints.mustPayToScript vhash unitDatum
            $ flip toCsValue cs
            $ pure
            $ Tuple (fst tok) 1
      ]

  ubTx <- liftedE $ Lookups.mkUnbalancedTx lookups constraints
  BalancedSignedTransaction bsTx <-
    liftedM "Failed to balance/sign tx" $ balanceAndSignTx ubTx

  logInfo' $ "Balanced and signed tx is " <> show bsTx
  logInfo' $ "Created utxos " <> show values

  submit bsTx.signedTxCbor

-- | for each Script we have one redeemer that we're goig to supply
-- | for each MintingPolicy we spend the specified count of tokens with the names specified
-- | but one token each. We do not add datums, the redeemers are tupled up with the Scripts
spendTokens
  :: TransactionHash -> Contract Configuration Unit
spendTokens hash = do
  ContractConfig
    { validators
    } <- ask

  utxosnreds :: Array (Utxo /\ Redeemer) <- getUtxos hash
  let
    getOrefs :: Utxo -> Array TransactionInput
    getOrefs = Set.toUnfoldable
      <<< Set.filter ((_ == hash) <<< _.transactionId <<< unwrap)
      <<< Map.keys

    constraints :: Constraints.TxConstraints Unit Unit
    constraints = mconcat $ do
      (utxo /\ red) <- utxosnreds
      pure $ mconcat $
        (flip Constraints.mustSpendScriptOutput red <$> getOrefs utxo)

    lookups :: Lookups.ScriptLookups PlutusData
    lookups = mconcat
      [ mconcat $ Lookups.unspentOutputs <<< fst <$> utxosnreds
      , mconcat $ Lookups.validator <<< fst <$> validators
      ]

  logInfo' $ "Found " <> show (getOrefs <<< fst <$> utxosnreds) <>
    " at alwaysSucceeeds address"

  ubTx <- liftedE $ Lookups.mkUnbalancedTx lookups constraints
  BalancedSignedTransaction bsTx <-
    liftedM "Failed to balance/sign tx" $ balanceAndSignTx ubTx
  hash2 <- submit bsTx.signedTxCbor
  logInfo' $ "Hash of second transaction " <> show hash2
  pure unit

getUtxos
  :: forall (r :: Row Type)
   . TransactionHash
  -> Contract Configuration (Array (Utxo /\ Redeemer))
getUtxos hash = go
  where
  go = do
    ContractConfig
      { tokens
      , validators
      } <- ask

    utxos :: Array (UtxoM /\ Redeemer) <- for validators $ \(Tuple val red) ->
      do
        vhash <- liftContractM "could not hash validator" $ validatorHash val

        utxo <- liftContractM ("could not get utxos at " <> show vhash) =<<
          utxosAt
            (scriptHashAddress vhash)
        pure $ utxo /\ red

    liftAff $ delay $ Milliseconds $ toNumber 3_000
    let
      getorefs :: UtxoM -> Array TransactionInput
      getorefs utxo = Set.toUnfoldable
        $ Set.filter ((_ == hash) <<< _.transactionId <<< unwrap)
        $ Map.keys
        $ unwrap utxo

      orefs :: Array (Array TransactionInput)
      orefs = getorefs <<< fst <$> utxos

      tokenCount :: Int
      tokenCount = sum $ snd <$> tokens

    if (sum (length <$> orefs) == tokenCount) then
      pure $ coerce utxos
    else do
      logInfo' "Could not find utxos, trying again"
      go

isRedeemedBy1Script :: Maybe Validator
isRedeemedBy1Script = map wrap $ hush $ decodeAeson $ fromString
  "56010000222325333573466e1c0052002149858dd68011"

isRedeemedBy2Script :: Maybe Validator
isRedeemedBy2Script = map wrap $ hush $ decodeAeson $ fromString
  "56010000222325333573466e1c0052004149858dd68011"

isRedeemedBy3Script :: Maybe Validator
isRedeemedBy3Script = map wrap $ hush $ decodeAeson $ fromString
  "56010000222325333573466e1c0052006149858dd68011"

mkMintingPolicy :: String -> Maybe MintingPolicy
mkMintingPolicy = map wrap <<< hush <<< decodeAeson <<< fromString

mkCurSym :: MintingPolicy -> Maybe CurrencySymbol
mkCurSym mp = mkCurrencySymbol <<< getCurrencySymbol =<< scriptCurrencySymbol mp

mp1 :: Maybe MintingPolicy
mp1 = mkMintingPolicy
  "59099601000032323233223322333222323233322232323232333222333222333333332222222233\
  \22333332222233332222332233223322333222332233223322332233223232323232323232323232\
  \3232323232323232323232323232335001011223304849010e77726f6e672072656465656d657200\
  \333504b04a00233504904f4800848888c014cc00cc010008c01800494cd4c12400441484d4060d4c\
  \144cd5ce2481025064000524988c8c8c8c8c8c8cccd5cd19b8735573aa00a90001280112803a4c26\
  \603ca002a0042600c6ae8540084c050d5d09aba25001135573ca00226ea80084d405d26232323232\
  \3232323232323232323232323232323232323333573466e1cd55cea80aa40004a0044a02e9309999\
  \999999817a800a8012801a8022802a8032803a8042804a805099a81080b1aba15012133502001635\
  \742a0202666aa032eb94060d5d0a8070999aa80c3ae501735742a018266a03a0426ae8540284cd40\
  \70cd54078085d69aba15008133501675a6ae8540184cd4069d71aba150041335019335501b75c034\
  \6ae8540084c080d5d09aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae\
  \8940044d5d1280089aba25001135573ca00226ea80084d40592623232323232323333573466e1cd5\
  \5cea802a40004a0044a00e930998102800a8010980b9aba1500213005357426ae8940044d55cf280\
  \089baa0021350154988c8c8c8c8c8c8c8c8cccd5cd19b8735573aa00e90001280112804a4c266604\
  \6a002a004a006260106ae8540104ccd54029d728049aba15002133500775c6ae84d5d1280089aba2\
  \5001135573ca00226ea80084d40512623232323232323333573466e1cd55cea802a40004a0044a00\
  \e930998112800a8010980a1aba150021335005012357426ae8940044d55cf280089baa0021350134\
  \98488c8c8c8c8c8c8cccd5cd19b87500448000940089401126135025500113006357426aae79400c\
  \4cccd5cd19b875001480089408c9401126135573aa00226ea80084d404d261335500175ceb444888\
  \c8c8c004dd58019a80090008918009aa82811191919191919191999aab9f00855051253002120010\
  \56350022200135001220023555505712223300321300a357440124266a0a8a00aa600624002266aa\
  \0a8a002a004260106aae7540084c018d55cf280089aba10011223232323232323333573466e1cd55\
  \cea802a40004a0044a00e93099a8122800a801099a8038031aba150021335007005357426ae89400\
  \44d55cf280089baa002135010498488c8c8c8c8c8c8cccd5cd19b8735573aa00a90001280112803a\
  \4c266a04ea002a004266a01000c6ae8540084c020d5d09aba25001135573ca00226ea80084d403d2\
  \61223232323232323333573466e1cd55cea802a40004a0044a00e93099a8122800a801099a803803\
  \1aba1500213007357426ae8940044d55cf280089baa00213500e498488c8c8c8c8c8c8c8cccd5cd1\
  \9b87500548010940a8940092613333573466e1d4011200225002250044984d40a540044c018d5d09\
  \aab9e500313333573466e1d4005200025027250044984d55cea80089baa00213500d4988c8c8c8cc\
  \cd5cd19b875002480088108940092613333573466e1d400520002040250034984d55ce9baa002135\
  \00b498488c8c8c004dd60019a80090008918009aa824911999aab9f0012504723350463006357420\
  \0460066ae88008120800444888c8c8c8c8c8c8cccd5cd19b8735573aa00a90001280112803a4c266\
  \aa096a002a0042600e6ae8540084c014d5d09aba25001135573ca00226ea80084d40292623232323\
  \2323232323232323232323333573466e1d4029200625002250044984c0c140044c038d5d09aab9e5\
  \00b13333573466e1d401d200425002250044984c0ad40044c030d5d09aab9e500813333573466e1d\
  \4011200225002250044984c09d40044c02cd5d09aab9e500513333573466e1d40052000250032500\
  \64984d55cea80189812a80089bae357426aae7940044dd500109a803a4c464646464646464646464\
  \6464646464646464646464646464646666ae68cdc3a80aa401840844a0049309999ab9a3370ea028\
  \900510211280124c26666ae68cdc3a809a40104a0044a00c9309981e2800a80109bae35742a00426\
  \eb4d5d09aba25001135573ca02426666ae68cdc3a8072400c4a0044a00c9309981c2800a80109bae\
  \35742a00426eb8d5d09aba25001135573ca01a26666ae68cdc3a804a40084a0044a00c9309981ba8\
  \00a801098069aba150021375c6ae84d5d1280089aab9e500813333573466e1d40112002250022500\
  \44984c0cd40044c020d5d09aab9e500513333573466e1d4005200025003250064984d55cea801898\
  \16a800898021aba135573ca00226ea80084d40192623232323232323232323232323333573466e1d\
  \4021200225002250084984ccc0e140054009400c4dd69aba150041375a6ae8540084dd69aba13574\
  \4a00226ae8940044d55cf280289999ab9a3370ea0029000128019280324c26aae75400c4c0c54004\
  \4c010d5d09aab9e50011375400426a00a93119191919191919191999ab9a3370ea00890011280112\
  \80224c2606ca00226eb8d5d09aab9e500513333573466e1d4005200025003250064984d55cea8018\
  \9819a80089bae357426aae7940044dd500109a80224c46464646464646666ae68cdc39aab9d50054\
  \8000940089401d26133026500150021300635742a00426eb4d5d09aba25001135573ca00226ea800\
  \84d400d2623232323333573466e1cd55cea801240004a0044a0089309bae357426aae7940044dd50\
  \0109a80124c24c4424660020060044002444444444424666666666600201601401201000e00c00a0\
  \08006004400244246600200600440024442466600200800600440024424660020060044002242446\
  \00400622440022400224424660020060042400224424660020060042400224424660020060042400\
  \22424446006008224440042244400224002424444600800a424444600600a424444600400a424444\
  \600200a40024424660020060044002424444444600e01044244444446600c012010424444444600a\
  \01024444444008244444440064424444444660040120104424444444660020120104002424460040\
  \0644424466600200a00800640024244600400642446002006400244a66a600c0022010266ae70008\
  \01c4800488ccd5cd19baf00200100600512001122002122001200123750002224a00822440042442\
  \44660020080062400224002400222442466002006004224002224646002002446600660040040022\
  \222466a0044246600246a00644600400646a00644600200600224646460020024466006600400400\
  \244246a6008246a60080066a0060020021"

mp2 :: Maybe MintingPolicy
mp2 = mkMintingPolicy
  "59099601000032323233223322333222323233322232323232333222333222333333332222222233\
  \22333332222233332222332233223322333222332233223322332233223232323232323232323232\
  \3232323232323232323232323232335001011223304849010e77726f6e672072656465656d657200\
  \333504b04a00233504904f4801048888c014cc00cc010008c01800494cd4c12400441484d4060d4c\
  \144cd5ce2481025064000524988c8c8c8c8c8c8cccd5cd19b8735573aa00a90001280112803a4c26\
  \603ca002a0042600c6ae8540084c050d5d09aba25001135573ca00226ea80084d405d26232323232\
  \3232323232323232323232323232323232323333573466e1cd55cea80aa40004a0044a02e9309999\
  \999999817a800a8012801a8022802a8032803a8042804a805099a81080b1aba15012133502001635\
  \742a0202666aa032eb94060d5d0a8070999aa80c3ae501735742a018266a03a0426ae8540284cd40\
  \70cd54078085d69aba15008133501675a6ae8540184cd4069d71aba150041335019335501b75c034\
  \6ae8540084c080d5d09aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae\
  \8940044d5d1280089aba25001135573ca00226ea80084d40592623232323232323333573466e1cd5\
  \5cea802a40004a0044a00e930998102800a8010980b9aba1500213005357426ae8940044d55cf280\
  \089baa0021350154988c8c8c8c8c8c8c8c8cccd5cd19b8735573aa00e90001280112804a4c266604\
  \6a002a004a006260106ae8540104ccd54029d728049aba15002133500775c6ae84d5d1280089aba2\
  \5001135573ca00226ea80084d40512623232323232323333573466e1cd55cea802a40004a0044a00\
  \e930998112800a8010980a1aba150021335005012357426ae8940044d55cf280089baa0021350134\
  \98488c8c8c8c8c8c8cccd5cd19b87500448000940089401126135025500113006357426aae79400c\
  \4cccd5cd19b875001480089408c9401126135573aa00226ea80084d404d261335500175ceb444888\
  \c8c8c004dd58019a80090008918009aa82811191919191919191999aab9f00855051253002120010\
  \56350022200135001220023555505712223300321300a357440124266a0a8a00aa600624002266aa\
  \0a8a002a004260106aae7540084c018d55cf280089aba10011223232323232323333573466e1cd55\
  \cea802a40004a0044a00e93099a8122800a801099a8038031aba150021335007005357426ae89400\
  \44d55cf280089baa002135010498488c8c8c8c8c8c8cccd5cd19b8735573aa00a90001280112803a\
  \4c266a04ea002a004266a01000c6ae8540084c020d5d09aba25001135573ca00226ea80084d403d2\
  \61223232323232323333573466e1cd55cea802a40004a0044a00e93099a8122800a801099a803803\
  \1aba1500213007357426ae8940044d55cf280089baa00213500e498488c8c8c8c8c8c8c8cccd5cd1\
  \9b87500548010940a8940092613333573466e1d4011200225002250044984d40a540044c018d5d09\
  \aab9e500313333573466e1d4005200025027250044984d55cea80089baa00213500d4988c8c8c8cc\
  \cd5cd19b875002480088108940092613333573466e1d400520002040250034984d55ce9baa002135\
  \00b498488c8c8c004dd60019a80090008918009aa824911999aab9f0012504723350463006357420\
  \0460066ae88008120800444888c8c8c8c8c8c8cccd5cd19b8735573aa00a90001280112803a4c266\
  \aa096a002a0042600e6ae8540084c014d5d09aba25001135573ca00226ea80084d40292623232323\
  \2323232323232323232323333573466e1d4029200625002250044984c0c140044c038d5d09aab9e5\
  \00b13333573466e1d401d200425002250044984c0ad40044c030d5d09aab9e500813333573466e1d\
  \4011200225002250044984c09d40044c02cd5d09aab9e500513333573466e1d40052000250032500\
  \64984d55cea80189812a80089bae357426aae7940044dd500109a803a4c464646464646464646464\
  \6464646464646464646464646464646666ae68cdc3a80aa401840844a0049309999ab9a3370ea028\
  \900510211280124c26666ae68cdc3a809a40104a0044a00c9309981e2800a80109bae35742a00426\
  \eb4d5d09aba25001135573ca02426666ae68cdc3a8072400c4a0044a00c9309981c2800a80109bae\
  \35742a00426eb8d5d09aba25001135573ca01a26666ae68cdc3a804a40084a0044a00c9309981ba8\
  \00a801098069aba150021375c6ae84d5d1280089aab9e500813333573466e1d40112002250022500\
  \44984c0cd40044c020d5d09aab9e500513333573466e1d4005200025003250064984d55cea801898\
  \16a800898021aba135573ca00226ea80084d40192623232323232323232323232323333573466e1d\
  \4021200225002250084984ccc0e140054009400c4dd69aba150041375a6ae8540084dd69aba13574\
  \4a00226ae8940044d55cf280289999ab9a3370ea0029000128019280324c26aae75400c4c0c54004\
  \4c010d5d09aab9e50011375400426a00a93119191919191919191999ab9a3370ea00890011280112\
  \80224c2606ca00226eb8d5d09aab9e500513333573466e1d4005200025003250064984d55cea8018\
  \9819a80089bae357426aae7940044dd500109a80224c46464646464646666ae68cdc39aab9d50054\
  \8000940089401d26133026500150021300635742a00426eb4d5d09aba25001135573ca00226ea800\
  \84d400d2623232323333573466e1cd55cea801240004a0044a0089309bae357426aae7940044dd50\
  \0109a80124c24c4424660020060044002444444444424666666666600201601401201000e00c00a0\
  \08006004400244246600200600440024442466600200800600440024424660020060044002242446\
  \00400622440022400224424660020060042400224424660020060042400224424660020060042400\
  \22424446006008224440042244400224002424444600800a424444600600a424444600400a424444\
  \600200a40024424660020060044002424444444600e01044244444446600c012010424444444600a\
  \01024444444008244444440064424444444660040120104424444444660020120104002424460040\
  \0644424466600200a00800640024244600400642446002006400244a66a600c0022010266ae70008\
  \01c4800488ccd5cd19baf00200100600512001122002122001200123750002224a00822440042442\
  \44660020080062400224002400222442466002006004224002224646002002446600660040040022\
  \222466a0044246600246a00644600400646a00644600200600224646460020024466006600400400\
  \244246a6008246a60080066a0060020021"

mp3 :: Maybe MintingPolicy
mp3 = mkMintingPolicy
  "59099601000032323233223322333222323233322232323232333222333222333333332222222233\
  \22333332222233332222332233223322333222332233223322332233223232323232323232323232\
  \3232323232323232323232323232335001011223304849010e77726f6e672072656465656d657200\
  \333504b04a00233504904f4801848888c014cc00cc010008c01800494cd4c12400441484d4060d4c\
  \144cd5ce2481025064000524988c8c8c8c8c8c8cccd5cd19b8735573aa00a90001280112803a4c26\
  \603ca002a0042600c6ae8540084c050d5d09aba25001135573ca00226ea80084d405d26232323232\
  \3232323232323232323232323232323232323333573466e1cd55cea80aa40004a0044a02e9309999\
  \999999817a800a8012801a8022802a8032803a8042804a805099a81080b1aba15012133502001635\
  \742a0202666aa032eb94060d5d0a8070999aa80c3ae501735742a018266a03a0426ae8540284cd40\
  \70cd54078085d69aba15008133501675a6ae8540184cd4069d71aba150041335019335501b75c034\
  \6ae8540084c080d5d09aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae\
  \8940044d5d1280089aba25001135573ca00226ea80084d40592623232323232323333573466e1cd5\
  \5cea802a40004a0044a00e930998102800a8010980b9aba1500213005357426ae8940044d55cf280\
  \089baa0021350154988c8c8c8c8c8c8c8c8cccd5cd19b8735573aa00e90001280112804a4c266604\
  \6a002a004a006260106ae8540104ccd54029d728049aba15002133500775c6ae84d5d1280089aba2\
  \5001135573ca00226ea80084d40512623232323232323333573466e1cd55cea802a40004a0044a00\
  \e930998112800a8010980a1aba150021335005012357426ae8940044d55cf280089baa0021350134\
  \98488c8c8c8c8c8c8cccd5cd19b87500448000940089401126135025500113006357426aae79400c\
  \4cccd5cd19b875001480089408c9401126135573aa00226ea80084d404d261335500175ceb444888\
  \c8c8c004dd58019a80090008918009aa82811191919191919191999aab9f00855051253002120010\
  \56350022200135001220023555505712223300321300a357440124266a0a8a00aa600624002266aa\
  \0a8a002a004260106aae7540084c018d55cf280089aba10011223232323232323333573466e1cd55\
  \cea802a40004a0044a00e93099a8122800a801099a8038031aba150021335007005357426ae89400\
  \44d55cf280089baa002135010498488c8c8c8c8c8c8cccd5cd19b8735573aa00a90001280112803a\
  \4c266a04ea002a004266a01000c6ae8540084c020d5d09aba25001135573ca00226ea80084d403d2\
  \61223232323232323333573466e1cd55cea802a40004a0044a00e93099a8122800a801099a803803\
  \1aba1500213007357426ae8940044d55cf280089baa00213500e498488c8c8c8c8c8c8c8cccd5cd1\
  \9b87500548010940a8940092613333573466e1d4011200225002250044984d40a540044c018d5d09\
  \aab9e500313333573466e1d4005200025027250044984d55cea80089baa00213500d4988c8c8c8cc\
  \cd5cd19b875002480088108940092613333573466e1d400520002040250034984d55ce9baa002135\
  \00b498488c8c8c004dd60019a80090008918009aa824911999aab9f0012504723350463006357420\
  \0460066ae88008120800444888c8c8c8c8c8c8cccd5cd19b8735573aa00a90001280112803a4c266\
  \aa096a002a0042600e6ae8540084c014d5d09aba25001135573ca00226ea80084d40292623232323\
  \2323232323232323232323333573466e1d4029200625002250044984c0c140044c038d5d09aab9e5\
  \00b13333573466e1d401d200425002250044984c0ad40044c030d5d09aab9e500813333573466e1d\
  \4011200225002250044984c09d40044c02cd5d09aab9e500513333573466e1d40052000250032500\
  \64984d55cea80189812a80089bae357426aae7940044dd500109a803a4c464646464646464646464\
  \6464646464646464646464646464646666ae68cdc3a80aa401840844a0049309999ab9a3370ea028\
  \900510211280124c26666ae68cdc3a809a40104a0044a00c9309981e2800a80109bae35742a00426\
  \eb4d5d09aba25001135573ca02426666ae68cdc3a8072400c4a0044a00c9309981c2800a80109bae\
  \35742a00426eb8d5d09aba25001135573ca01a26666ae68cdc3a804a40084a0044a00c9309981ba8\
  \00a801098069aba150021375c6ae84d5d1280089aab9e500813333573466e1d40112002250022500\
  \44984c0cd40044c020d5d09aab9e500513333573466e1d4005200025003250064984d55cea801898\
  \16a800898021aba135573ca00226ea80084d40192623232323232323232323232323333573466e1d\
  \4021200225002250084984ccc0e140054009400c4dd69aba150041375a6ae8540084dd69aba13574\
  \4a00226ae8940044d55cf280289999ab9a3370ea0029000128019280324c26aae75400c4c0c54004\
  \4c010d5d09aab9e50011375400426a00a93119191919191919191999ab9a3370ea00890011280112\
  \80224c2606ca00226eb8d5d09aab9e500513333573466e1d4005200025003250064984d55cea8018\
  \9819a80089bae357426aae7940044dd500109a80224c46464646464646666ae68cdc39aab9d50054\
  \8000940089401d26133026500150021300635742a00426eb4d5d09aba25001135573ca00226ea800\
  \84d400d2623232323333573466e1cd55cea801240004a0044a0089309bae357426aae7940044dd50\
  \0109a80124c24c4424660020060044002444444444424666666666600201601401201000e00c00a0\
  \08006004400244246600200600440024442466600200800600440024424660020060044002242446\
  \00400622440022400224424660020060042400224424660020060042400224424660020060042400\
  \22424446006008224440042244400224002424444600800a424444600600a424444600400a424444\
  \600200a40024424660020060044002424444444600e01044244444446600c012010424444444600a\
  \01024444444008244444440064424444444660040120104424444444660020120104002424460040\
  \0644424466600200a00800640024244600400642446002006400244a66a600c0022010266ae70008\
  \01c4800488ccd5cd19baf00200100600512001122002122001200123750002224a00822440042442\
  \44660020080062400224002400222442466002006004224002224646002002446600660040040022\
  \222466a0044246600246a00644600400646a00644600200600224646460020024466006600400400\
  \244246a6008246a60080066a0060020021"
